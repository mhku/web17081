1、函数
	1、作用域
		1、什么是作用域
			作用域表示的是变量或函数的可访问范围。
			JS中的作用域，分为两种：
			1、函数作用域：只在某函数范围内有效
			2、全局作用域：代码的任何位置都有效
		2、函数作用域中的变量
			又称为：局部变量,只有在声明的函数中有效
			ex:
				function test(){
					var num = 10;
				}
		3、全局作用域中的变量
			又称为：全局变量，一经声明，任何位置都能用
			1、不在 function 中声明的变量，为全局变量
			2、声明变量不使用var，无论任何位置声明，都是全局变量(不推荐)
	2、声明提前
		1、什么是声明提前
			JS程序在正式执行之前，会将所有var声明的变量，function声明的函数，都预读(声明)到所在作用域的顶部。但赋值还是保留在原位
	3、按值传递
		1、什么是"值传递"
			基本数据类型的数据，在做参数传递时，都是按照"值传递"的方式进行传参的。
			值传递：真正传递参数时，实际上传递的是值的副本(复制出来的一个值)，而不是原始值
	4、函数的作用域
		分为2中：
		1、局部函数
			在某个function中声明的函数
		2、全局函数
			在最外层(<script>中)定义的函数就是全局函数，全局函数一经定义，任何位置都能调用
	5、ECMAScript 提供一组全局函数
		1、parseInt()
		2、parseFloat()
		3、isNaN()
		4、encodeURI()
			URI : Uniform Resource Identifier
			URL : Uniform Resource Locator
			作用：对统一资源标识符进行编码，并返回编码后的字符串
				所谓的进行编码，就是将地址中的多字节的文件编成单字节文字
		5、decodeURI()
			作用：对已编码的URI进行解码，并返回解码后的字符串
		6、encodeURIComponent()
			在 encodeURI 的基础上，允许对特殊符号也进行编码
		7、decodeURIComponent()
		8、eval()
			作用：执行以字符串表示的JS代码
		练习：
			1、请用户输入一个搜索关键字，控制台中输出生成的编码后的url地址(encodeURI,decodeURI)
			2、简易JS执行器：请用户输入任意可执行的JS代码或表达式，在程序中将其执行(eval)
	6、递归调用
		递归：在一个函数的内部再一次调用自己
		问题：求 5! (5*4*3*2*1) 
			5! = 5 * 4!
			4! = 4 * 3!
			3! = 3 * 2!
			2! = 2 * 1!
			1! = 1
		通过一个函数，求数字n的阶乘
		function f(n){
			//... ...
		}

		f(5) : 计算5的阶乘
		f(10): 计算10的阶乘

		效率：
			在本次调用还未结束时，就开始了下次的调用，本次调用就会被挂起，直到所有的调用都完成之后，才会依次返回。所以调用次数越多，效率越低!

		练习：
			以下数列：菲波那切数列
			1,1,2,3,5,8,13,21,34,55,... ...
			已知：
				该数列中的第一个数和第二个数都是1
				从第3个数字开始，每个数字都是前两个数之和
			问题：用一个函数 求该数列中第n个数字的值 
			通过函数f(n)计算数列中第n个数字的值
			f(1) = 1
			f(2) = 1
			f(3) = f(2) + f(1)
			f(4) = f(3) + f(2)
			f(5) = f(4) + f(3)
			...
			f(99) = f(98) + f(97)
			f(n) :
				如果 n == 1 或 n == 2 ，结果为1
				否则 f(n) = f(n-1) + f(n-2)
2、分支结构
	1、if 结构
		语法：
			if(条件){
				语句块
			}
		注意：
			1、条件尽量是boolean的，如果不是boolean的，以下条件值，会当做false
				if(0){ ... }
				if(0.0){...}
				if(""){}
				if(undefined){}
				if(null){}
				if(NaN){}
				
				ex:
					if(35){} : 真
					if("李文华真帅") : 真
			2、if 后的 {} 可以省略 
				省略后，if 只控制下面的第一条语句
				建议：不要省略if后的{}
	2、if ... else ... 结构
		语法：
			if(条件){
				语句块
			}else{
				语句块
			}
	3、if ... else if ... else ...
		语法：
			if(条件1){
				语句块1;
			}else if(条件2){
				语句块2;
			}else if(条件3){
				语句块3;
			}else{
				语句块n;
			}
		练习：
			分三次输入年，月，日
			判断 该日是该年的第?天
			ex:
				输入年 ：2017
				输入月 ：3
				输入日 ：5
				2017年3月5日是2017年的第64天
				1,3,5,7,8,10,12 ：各31天
				4,6,9,11 : 各30天
				2 ：平年 28天，闰年29天

				2017年9月20日 ？？
				累加 1-8月 ，再加 20

	4、switch ... case 
		1、作用
			等值判断
		2、语法
			switch(值/表达式){
				case 值1:
					语句块1;
					break;//结束switch结构，可选的
				case 值2:
					语句块2;
					break;
				... ...
				default:
					语句块n;//所有case都未被执行时，才执行default
					break;
			}
			注意：
				switch 后的值或表达式，与case后的值进行比较时是使用的 === 判断
			ex:
				1、输入 1-7之间的数字
				2、	
					输入1 ：今天吃红烧肉
					输入2 ：今天吃红烧排骨
					输入3 ：今天吃红烧鱼
					输入4 ：今天吃红烧狮子头
					输入5 ：今天吃海鲜大餐
					输入6 ：今天休息
					输入7 ：今天休息
		3、特殊用法
			switch(值/表达式){
				case 值1:
				case 值2:
				case 值3:
					语句块1;
			}
			练习：
				使用switch结构改版日期计算器
				var year,month,day;
				var totalDays = 0;
				switch(month-1){
					case 11:
						totalDays += 30;
					case 10:
						totalDays += 31;
					case 9:
						totalDays += 30;

						...
				}
				totalDays += day;
3、循环结构
	1、特点
		1、循环条件 ：循环的开始和结束
		2、循环操作 ：要执行的相同或相似的语句 
	2、循环 - while
		1、语法
			while(条件){
				//循环体 - 循环操作
				//更新循环条件
			}

			练习：
				1、打印输出 1-100之间所有的数字
				2、计算 1-100之间所有数字的和
				3、计算 1-100之间所有偶数的和
	3、循环的流程控制
		1、break
			作用：终止整个循环的运行
			ex:
				循环从弹框中录入信息，并且打印，直到输入 exit 为止
		2、continue
			作用：终止本次循环的运行，继续执行下一次循环
	
作业：
	输入 年，月，日，计算 该日是星期几
	前提：1900年1月1日 是星期 1

	提示：
		1、从1900年开始，到输入年份的前一年为止，天数进行累加
		2、从1月份开始，到输入月份的前一月为止，天数再累加
		3、再累加 日
		4、将整体数值 % 7 ,
			1 - 6 : 星期1 - 星期6
			0 : 星期日















https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=0&rsv_idx=1&tn=baidu&wd=%E4%BD%B3%E8%83%BD&rsv_pq=c4dd0a1e0001b096&rsv_t=2be8pQ157UeeHfPiDBP5yFb%2BHKksEgJjT%2B79PvJmcJjxRgw8HYxLcmuLlpE&rqlang=cn&rsv_enter=1&rsv_sug3=12&rsv_sug1=21&rsv_sug7=100&rsv_sug2=0&inputT=5238&rsv_sug4=5238

https://www.baidu.com/s?wd=%E4%BD%B3%E8%83%BD
