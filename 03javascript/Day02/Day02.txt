1、数据类型转换
	1、隐式(自动)转换
		不同类型的数据在计算过程中自动进行转换
		1、数字 + 字符串 ：数字转换为字符串
			var num = 15;
			var str = "Hello";
			var result = num + str; // 15Hello
		2、数字 + 布尔 ：将布尔转换为数字，true->1,false->0
			var num = 10;
			var isSun = true;
			var result = num + isSun; //11
		3、字符串 + 布尔 ：将布尔转换为字符串
			true -> "true"
			false -> "false"
			var str = "Hello";
			var isSun = true;
			var result = str + isSun; //Hellotrue
		4、布尔 + 布尔 ：将布尔转换数字
			true -> 1 , false -> 0
		问题：
			var num1 = 15;
			var num2 = 18;
			var str1 = "Hello";
			1、str1 + num1 + num2 
				结果：Hello1518
			2、num1 + num2 + str1
				结果：33Hello 
		允许使用 typeof() 的函数检查变量的数据类型
		var num = 18;
		var r = typeof(num);
		console.log(r); // number

		var str = "Hello";
		var r = typeof(str);
		console.log(r); // string
	2、强制转换 - 转换函数
		1、toString()
			将任意类型数据转换为字符串
			语法：var result=变量.toString();
			ex:
				var num = 15;
				var str = num.toString();
				console.log(typeof(str));
		2、parseInt()
			将任意类型数据转换为整数
			如果转换不成功，结果为 : NaN (Not a Number)
			语法：
				var result=parseInt(数据);
		3、parseFloat()
			将任意类型数据转换为小数
			如果转换不成功，结果为 : NaN
			语法：
				var result=parseFloat(数据);
		4、Number()
			将任意类型数据转换为number
			注意：如果包含非法字符，则返回NaN
			var result = parseInt("123abc"); // 123
			var result1= Number("123abc"); //NaN
2、运算符 和 表达式
	1、什么是表达式
		由运算符 连接 操作数所组成的式子就是表达式
		任何一个表达式都会有结果
		ex:
			1、15 + 18
			2、var y = x = 15;

	2、运算符
		1、算术运算符
			+,-,*,/,%,++,--
			% : 取余数
			++ : 自增运算符，只做+1操作
				++做前缀：先自增，再运算
				++做后缀：先运算，再自增
				var num = 5;
				console.log(num++);//打印 5 ，变为 6
				console.log(++num);//变为 7 ，打印 7
			-- : 自减运算符，只做-1操作
			练习：
				var num = 5;
				           5     (6)6    6(7)    (8)8    8(9)    9
				var result=num + ++num + num++ + ++num + num++ + num;
				结果：42  
		2、关系运算符(比较运算符)
			>,<,>=,<=,==,!=,===,!==
			运算结果为 ：boolean 类型
			问题：

				1、5 > "10" : false 
					关系运算符两端，只有有一个是number的话，另外一个会隐式转换为number(使用Number())，再进行比较
				2、"5" > "10" : true
					  53
					 "5"
				PK  49
					 "1    0"

				3、"张三丰">"张无忌" false
					关系运算符两端，如果都是string的话，则比较每位字符的Unicode码，以Unicode码不相等的两个字符比较结果作为整体结果
					   19977	
					张  三  丰
				PK   26080
					张  无  忌
				4、"3a" > 10 : false
					Number("3a"); --> NaN
					注意：
						NaN 与任何一个数据做比较时，结果都是false
			
			isNaN() 函数 
				NaN 不能使用 比较运算符进行判断的
				判断一个数据是否为数字/非数字的话，需要使用 isNaN() 来判断
				语法：
					var result=isNaN(数据);
				作用：
					判断指定数据是否为非数字，如果不是数字，返回值为true，是数字的话返回值为false
			
				NaN 与任何数据做 != ，结果永远为true
				NaN 与任何数据做 == ，结果永远为false
		3、逻辑运算符
			!,&&,||
			! : 取反
			&& : 并且，关联的两个条件都为true时，整个表达式结果为 true
			|| : 或者，关联的两个条件，只要有一个为true，整个表达式结果为 true

			短路逻辑：
			短路逻辑&& ：
				当第一个条件为false时，整体表达式的结果就为false，不需要判断第二个条件
				如果第一个条件为true时，会继续判断或执行第二个条件

				条件 && 操作;
			短路逻辑|| ：
				当第一个条件为true时，就不再执行后续的表达式，整体结果为true
				当第一个条件为false时，继续执行第二个条件或操作

			1、判断闰年
				1、从弹框中输入一个年份信息，保存在year中
				2、判断year年是否为闰年，并给出提示
					闰年：
						能被4整除，但不能被100整除
						或能被400整除的年份
					输入年份：2000
					2000年是闰年

					输入年份：2001
					2001年不是闰年
			2、判断一个字符是否为英文，汉字，数字
				1、从弹框中，输入一个字符，保存在input中
				2、判断input是否为英文，并给出提示
					判断input是否为小写字符
					input >= "a" && input <= "z"
				3、判断input是否为数字，并给出提示
				4、判断input是否为汉字，并给出提示
		4、位运算符
			>>,<<,&,|,^
			&:按位与，判断奇偶性
				任意数字与1做按位与，结果为1，则为奇数，结果为0，则为偶数
			|:按位|，对小数取整
				将任意小数与0做按位或，结果则取整数部分
			^:按位异或,用于交换两个数字
				var a = 15;
				var b = 18;

				a = a ^ b;
				b = b ^ a;
				a = a ^ b;
		5、赋值运算符 & 扩展的赋值运算符
			1、赋值运算 --> "="
			2、扩展的赋值运算符
				+=,-=,*=,/= ... ...

				a += b ; ==> a = a + b;

				a=a+1;a+=1;a++;++a;

				ex:
					使用 扩展的赋值运算符，简化下列操作
					a = a ^ b;
					b = b ^ a;
					a = a ^ b;
		6、条件(三目)元素符
			单目(一元)运算符：只需要一个操作数或表达式
				++,--,!
				ex:
					a++;b--;!isRun
			双目(二元)运算符：需要两个操作数或表达式
				+,-,*,/,%,>,<,<=,>=,==,!=,===,!==,&&,||,&,|,^
			三目(三元)运算符：需要三个操作数或表达式
				条件表达式?表达式1 :表达式2;
				
				先判断条件表达式的值，
				如果条件为true，则执行表达式1的操作
				如果条件为false，则执行表达式2的操作
			ex:
				从弹框中输入考试成绩
				如果成绩大于60，则输出及格，否则，输出不及格

			练习：
				1、输入一个考试成绩
				2、判断 成绩如果 == 100 输出"奖励兰博基尼"
				3、如果成绩 >=90 ,输出"奖励玛莎拉蒂"
				4、如果成绩 >=80 ,输出"奖励手抓饼"
				5、否则 ，输出 "给俩大嘴巴子!!!"
3、函数 - function
	1、什么是函数
		函数，function，也称为方法(method)
		函数是一段预定义好，并可以被反复执行的代码块
			预定义:提前定义好，并非马上执行
			代码块:可以包含多条可执行的语句
			反复执行:允许被多次调用
		函数 - 功能

		使用过的函数：
			parseInt(); -- 将任意类型的数据转换为整数
			parseFloat();
			Number();
			console.log();
			document.write();
			alert();
			prompt();
	2、定义 和 使用函数
		1、普通函数的声明和调用(无参无返回值)
			1、声明
				function 函数名(){
					//函数体 - 若干条可执行的语句
				}
			2、调用函数
				在任意JavaScript合法的位置处通过：
				函数名();
				进行对函数的调用

			练习：
				1、封装一个函数名称为 calculate
				2、函数体内，
					1、弹框中 分两次输入两个数字
					2、计算两个数字之和，并打印在控制台上
				3、页面上，创建一个按钮"计算器",单击时，调用calculate() 函数
		2、带参数函数的声明和调用
			1、声明
				function 函数名(参数列表){
					//函数体
				}

				参数列表：可以声明0 或 多个参数,多个参数间，使用 , 隔开即可
				声明函数时，声明的参数，称之为 "形参"
			2、调用
				函数名(参数值列表);
				注意：
					尽量按照声明函数的格式进行调用
				调用函数时，传递的参数值，称之为 "实参"
		3、带返回值的函数的声明和调用
			1、声明
				function 函数名(参数列表){
					函数体
					... ...
					return 值;
				}

				注意：最多只能返回一个值
			2、调用
				允许使用一个变量接收函数的返回值
				var result = 函数名(实参列表);





作业：
	1、定义一个可以接收两个数字的函数，函数体内返回两个数字的和。调用函数
	2、定义一个可以接收三个数字的函数，函数体内返回三个数字中最大的数字
	3、定义一个可以接收三个数字的函数，函数体内实现三个数字的排序输出








 