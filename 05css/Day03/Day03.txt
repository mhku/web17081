1.渐变
  1.什么是渐变？
	  多中颜色平缓变化的一种显示效果
	2.渐变的主要因素
	  色标：一种颜色及其出现的位置
		一个渐变由多个色标组成（至少两个）
	3.渐变分类
	  1.线性渐变
		  以直线的方向来填充渐变色
		2.径向渐变
		  以圆形的方式实现填充效果
		3.重复渐变
		  将线性渐变或径向渐变重复几次实现效果
	4.线性渐变
	  属性：background-image
		取值linear-gradient(angle,color-point1,color-point2....)
		1.angle:
		  表示渐变填充的方向或角度
			取值：
			   1.关键字
				    to top:从下向上填充渐变色
						to right:从左向右填充渐变色
						to bottom:从上向下填充渐变色
						to left:从右向左填充渐变色
				 2.角度值
				    0deg 从下向上填充，等同于to top
						90deg 从左向右填充，等同于to right
						180deg 从上向下填充，等同于to bottom
						270deg 从右向左填充，等同于to left
		2.color-point
		  色标：颜色及其位置
			取值：颜色以及位置的组合，中间用空格分开
			ex:
			  red 0% 在填充方向的开始位置处颜色为红色
				green 50% 到填充方向的一半的位置处，颜色为绿色
				blue 200px 到填充方向的200px的位置处，颜色为蓝色
	5.径向渐变
	  属性：background-image:radial-gradient([size at position],color-point1,color-point2，...)
		size at position
		  size:半径，以px为单位的数值
			position:圆心所在位置
			    1.x y 具体数字
					2.x% y% 元素宽和高的占比决定
					3.关键字：
					    x:left/center/right
							y:top/center/bottom
	6.重复渐变
	  1.重复线性渐变
		  background-image:repeating-linear-gradient(angle,color-point1,color-point2，...)
			注意：位置一定要给绝对数值（px）,不要给相对%
		2.重复径向渐变
		  background-image:repeating-radial-gradient([size at position],color-point1,color-point2，...)
	7.浏览器兼容性
	  各浏览的新版本都支持渐变属性
		对于不支持的浏览器版本，可以通过增加浏览器前缀的方式，让浏览器支持渐变属性。
		  Firefox:-moz-
			Chrome&Safari:-webkit-
			Opera:-o-
			IE:-ms-

			ex:
			  backgorund-image:linear-gradient(...)
			  backgorund-image:-ms-linear-gradient(...)
				backgorund-image:-o-linear-gradient(...)
				backgorund-image:-webkit-linear-gradient(...)
        backgorund-image:-moz-linear-gradient(...)
2.文本格式化属性
  1.字体属性
	   1.指定字体
		   属性：font-family
			 取值：用逗号隔开字体名称列表
			 ex：
			   font-family:"微软雅黑",Arial,"黑体";
		 2.字体大小
		   属性：font-size
       取值：以px或pt为单位的数值
		 3.字体加粗
		   属性：font-weight
       取值：
         bold:加粗(b,hn)
				 normal:整常
				 value:400-900 整百倍数字
		 4.字体样式
		    属性：font-style
				取值：
			   	italic:斜体（i）
					nromal:正常
		 5.小型大写字母
		   将小写字符变成大写，但大小与小写字符一致
			 属性：font-variant
			 取值：
			    normal 正常
					small-caps 小型大写字符
		练习：
		创建一个网页，定义一个div标记，并设置id为container,内容随意（中英文结合），设置样式如下：
		    1.字体为：微软雅黑
				2.文字大小：24px
				3.加粗显示文字
				4.斜体显示文字
				5.将所有的小写字符变为大写字符
		6.简写方式
		  属性：font
			取值：style variant weight size family;
			注意：使用简写方式，必须要设置family的值，否则无效。
			font:12px "微软雅黑";
  2.文本格式化
	  1.文本颜色
		  属性：color
			取值：合法颜色值
		2.文本排列
		  作用：指定文本水平的对齐方式
		  属性：text-align
			取值：left/center/right/justify(两端对齐)
		3.文本修饰（线条）
		  属性：text-decoration
			取值：
			   none 无任何线条修饰
				 underline 下划线修饰
				 overline 上划线修饰
				 line-through 删除线
		4.行高
		  作用：定义文本的高度
      控制文本在指定行高内呈现垂直居中的效果（行高大于字体本身大小时）
			属性：line-height
			取值：以px为单位的数值
			ex:
			   line-height:30px;
			   font-size:16px;
		5.首行缩进
		  属性：text-indent
			取值：以px为单位的数值
		6.文本阴影
		  属性：text-shadow
			取值：h-shadow v-shadow blur color;
		练习：
		  在文本属性练习基础之上增加如效果：
			  1.文本排列方式为两端对齐
				2.文字修饰为下划线修饰
				3.行高设置为字体大小的60px
				4.首行文本缩进24px
				5.文本阴影，水平、垂直偏移为0，模糊距离为2px,颜色为红色。
3.表格
  1.表格常用属性 
	  1.边距属性：padding
		2.边框属性：border
    3.尺寸属性：width,height
		4.文本格式属性：font-*,text-*,line-height
		5.背景属性：颜色，图像，渐变
		6.vertical-align
		  作用：指定单元格数据的垂直对齐方式
			取值：top/middle/bottom 上/中/下
		练习：
		  1.创建table.html,设置一个table的尺寸为400*400，4行4列
			2.每个单元格的尺寸为100*100
			3.设置表格和单元格的边框为1px solid #000；
	2.表格的特用属性
	  1.边框合并
		  属性：border-collapse
			取值：
			  1.separate
				  默认值，即分离边框模式
				2.collapse
				  边框合并
		2.边框边距
		  作用：设置单元格之间或单元格与表格之间的距离
			属性：border-spacing
			取值：
			   1.给定一个值，水平和垂直间距相同
				 2.给定两个值
				    第一个值表示水平间距
						第二个值表示垂直间距
				注意：只有在分离边框模式下，边框边距才有效，即border-collapse:separare,border-spacing才有效
		3.标题位置
		  属性：caption-side
			取值：
			   top:默认值，标题在表格内容之上
				 bottom:标题在表格内容之下
		4.显示规则
		  属性：table-layout
			取值：
			   1.auto 默认值，即自动表格布局，列的尺寸实际上时由内容来决定的。

				 2.fixed
				   固定表格布局，列的尺寸由设定的值为准。
			自动表格布局VS固定表格布局
			    1.自动表格布局
					  1.单元格的大小会适应内容
						2.表格复杂时，加载速度较慢
						3.自动布局会比较灵活（优点）
						4.适用于不确定每列大小时使用
					2.固定表格布局
					  1.单元格的尺寸取决于设定的值
						2.任何情况下都会加速显示表格（优点）
						3.固定表格布局不够灵活
						4.适用于确定每列大小时使用
4.定位---浮动定位
  1.定位
	  定位：指的是改变元素在页面中默认的定位方式
	2.定位分类
	  按照定位效果，可以分为以下几种情况
		   1.普通流定位（默认定位方式）
			 2.浮动定位
			 3.相对定位
			 4.绝对定位
			 5.固定定位
		1.普通流定位
		   又称为文档流定位
			 1.每个元素在页面中都有自己的空间
			 2.每个元素默认都是在其父元素的左上角位置开始出现
			 3.页面中的块级元素都是从上往下追个排列，每个元素独占一行
			 4.页面中行内元素以及行内块都是从左往右的方式来排列
			 问题：如何让多个块级元素在一行中显示
		2.浮动定位
		  1.什么是浮动定位？特点？
			  1.元素将被排除在文档流之外（脱离文档流），不再占据页面的空间。
				2.浮动元素会停靠在父元素的左边或右边，或其他已经浮动的元素的边缘上。
				3.浮动元素只能在当前行浮动。
				4.浮动定位解决的问题：让多个块级元素在一行中显示。
			2.属性
			  float
        取值：
				  left:左浮动，让元素停靠在父元素的左边，或者挨着左侧已经浮动的元素。
					right:右浮动，让元素停靠在父元素的右边，或者挨着右侧已经浮动的元素。
					none:默认值，即无任何浮动效果。

			练习：
			   创建float.html
				 1.创建三个div，id分别为d1,d2,d3,尺寸为200*200，背景颜色依次为红色，蓝色，黄色；
				 2.依次让d1,d2,d3实现右浮动，查看效果；
				 3.将步骤2注销，依次让d1,d2,d3实现左浮动，再观察效果。
		3.浮动引发的特殊效果
		  1.当父元素显示不下所有已经浮动元素时，最后一个将换行，但是，有可能会被卡住。
			2.元素一旦浮动起来，将会变成块级元素
			    1.允许修改尺寸
					2.能正常处理元素的外边距
			3.文本，行内元素，行内块元素是采用环绕的方式来排列的，是不会被浮动元素压在底下的，而会巧妙的避开浮动元素。
    4.清除浮动所带来的影响
		  元素一旦浮动起来后，就会对后续的元素带来影响（后续元素补位），如果后续元素不想被影响，那么就可以通过清除浮动来解决
			属性：clear
			取值：
			   1.left 清除当前元素前面元素左浮动所带来的影响
				 2.right 清除当前元素前面元素右浮动所带来的影响
				 3.none 默认值，不做任何的清除浮动操作
				 4.both 清除当前元素前面元素任何一种浮动所带来的影响
		5.浮动元素对父元素高度的影响
		  元素的高度，都是以未浮动元素的高度为准，浮动元素不占高度。
			解决父元素高度：
			    1.直接设置父元素的高度
					  弊端：不是每次都知道父元素的高度
					2.设置父元素也浮动
					  弊端：不是任何时候父元素都需要浮动，而且浮动会影响后续元素
					3.为父元素设置overflow
					  取值：hidden或auto
            弊端：如果有内容需要溢出显示的话，也会一同被隐藏
					4.在父元素中，追加空子元素，并且设置其clear:both;
					



  
			

		  


  


			  

